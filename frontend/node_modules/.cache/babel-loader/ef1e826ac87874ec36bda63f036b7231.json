{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\natha\\\\webdev-final-project\\\\frontend\\\\src\\\\components\\\\containers\\\\EditStudentContainer.js\";\n/*==================================================\r\nEditStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport React, { useState, useEffect } from \"react\";\nimport Header from './Header';\nimport { connect } from 'react-redux';\nimport { Navigate, useParams } from 'react-router-dom';\nimport EditStudentView from '../views/EditStudentView';\nimport { editStudentThunk, fetchStudentThunk } from '../../store/thunks';\nconst EditStudentContainer = props => {\n  const {\n    id\n  } = useParams();\n  const [state, setState] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    campusId: null,\n    redirect: false,\n    redirectId: null\n  });\n  useEffect(() => {\n    // Get student data from back-end database\n    props.fetchStudent(id);\n  }, [id, props]);\n  useEffect(() => {\n    if (props.student) {\n      setState(prevState => ({\n        ...prevState,\n        firstname: props.student.firstname,\n        lastname: props.student.lastname,\n        campusId: props.student.campusId\n      }));\n    }\n  }, [props.student]);\n\n  // Capture input data when it is entered\n  const handleChange = event => {\n    setState({\n      ...state,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  // Take action after user click the submit button\n  const handleSubmit = async event => {\n    event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n    let student = {\n      id: props.student.id,\n      firstname: state.firstname,\n      lastname: state.lastname,\n      campusId: state.campusId\n    };\n\n    // Edit student in back-end database\n    await props.editStudent(student);\n\n    // Update state, and trigger redirect to show the edited student\n    setState({\n      ...state,\n      redirect: true,\n      redirectId: student.id\n    });\n  };\n\n  // Redirect to edited student's page after submit\n  if (state.redirect) {\n    return /*#__PURE__*/React.createElement(Navigate, {\n      to: `/student/${state.redirectId}`,\n      replace: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 12\n      }\n    });\n  }\n\n  // Display the input form via the corresponding View component\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(EditStudentView, {\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    student: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }));\n};\n\n// Map state to props\nconst mapState = state => {\n  return {\n    student: state.student\n  };\n};\n\n// Map dispatch to props\nconst mapDispatch = dispatch => {\n  return {\n    editStudent: student => dispatch(editStudentThunk(student)),\n    fetchStudent: id => dispatch(fetchStudentThunk(id))\n  };\n};\n\n// Export store-connected container by default\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"names":["React","useState","useEffect","Header","connect","Navigate","useParams","EditStudentView","editStudentThunk","fetchStudentThunk","EditStudentContainer","props","id","state","setState","firstname","lastname","campusId","redirect","redirectId","fetchStudent","student","prevState","handleChange","event","target","name","value","handleSubmit","preventDefault","editStudent","createElement","to","replace","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapState","mapDispatch","dispatch"],"sources":["C:/Users/natha/webdev-final-project/frontend/src/components/containers/EditStudentContainer.js"],"sourcesContent":["/*==================================================\r\nEditStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nimport EditStudentView from '../views/EditStudentView';\r\nimport { editStudentThunk, fetchStudentThunk } from '../../store/thunks';\r\n\r\nconst EditStudentContainer = (props) => {\r\n  const { id } = useParams();\r\n  const [state, setState] = useState({\r\n    firstname: \"\",\r\n    lastname: \"\",\r\n    campusId: null,\r\n    redirect: false,\r\n    redirectId: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get student data from back-end database\r\n    props.fetchStudent(id);\r\n  }, [id, props]);\r\n\r\n  useEffect(() => {\r\n    if (props.student) {\r\n      setState(prevState => ({\r\n        ...prevState,\r\n        firstname: props.student.firstname,\r\n        lastname: props.student.lastname,\r\n        campusId: props.student.campusId\r\n      }));\r\n    }\r\n  }, [props.student]);\r\n\r\n  // Capture input data when it is entered\r\n  const handleChange = event => {\r\n    setState({\r\n      ...state,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let student = {\r\n      id: props.student.id,\r\n      firstname: state.firstname,\r\n      lastname: state.lastname,\r\n      campusId: state.campusId\r\n    };\r\n    \r\n    // Edit student in back-end database\r\n    await props.editStudent(student);\r\n\r\n    // Update state, and trigger redirect to show the edited student\r\n    setState({\r\n      ...state,\r\n      redirect: true,\r\n      redirectId: student.id\r\n    });\r\n  }\r\n\r\n  // Redirect to edited student's page after submit\r\n  if (state.redirect) {\r\n    return <Navigate to={`/student/${state.redirectId}`} replace={true} />\r\n  }\r\n\r\n  // Display the input form via the corresponding View component\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <EditStudentView \r\n        handleChange={handleChange} \r\n        handleSubmit={handleSubmit}\r\n        student={state}      \r\n      />\r\n    </div>          \r\n  );\r\n}\r\n\r\n// Map state to props\r\nconst mapState = (state) => {\r\n  return {\r\n    student: state.student,\r\n  };\r\n};\r\n\r\n// Map dispatch to props\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    editStudent: (student) => dispatch(editStudentThunk(student)),\r\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\nexport default connect(mapState, mapDispatch)(EditStudentContainer); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}