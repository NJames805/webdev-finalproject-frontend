{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\natha\\\\webdev-final-project\\\\frontend\\\\src\\\\components\\\\containers\\\\CampusContainer.js\";\n/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk, addCampusThunk } from \"../../store/thunks\";\nimport { useParams } from 'react-router-dom';\nimport { CampusView } from \"../views\";\nimport Header from './Header';\nconst CampusContainer = props => {\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    props.fetchCampus(id);\n  }, [id, props]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CampusView, {\n    campus: props.campus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }));\n};\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    addStudent: student => dispatch(addStudentThunk(student)),\n    deleteCampus: id => dispatch(deleteCampusThunk(id)),\n    editCampus: campus => dispatch(editCampusThunk(campus))\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["React","useEffect","connect","fetchCampusThunk","deleteCampusThunk","editCampusThunk","addCampusThunk","useParams","CampusView","Header","CampusContainer","props","id","fetchCampus","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","campus","mapState","state","mapDispatch","dispatch","addStudent","student","addStudentThunk","deleteCampus","editCampus"],"sources":["C:/Users/natha/webdev-final-project/frontend/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk, addCampusThunk } from \"../../store/thunks\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { CampusView } from \"../views\";\r\nimport Header from './Header';\r\n\r\nconst CampusContainer = (props) => {\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    props.fetchCampus(id);\r\n  }, [id, props]);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <CampusView campus={props.campus} />\r\n    </div>\r\n  );\r\n};\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n    addStudent: (student) => dispatch(addStudentThunk(student)),\r\n    deleteCampus: (id) => dispatch(deleteCampusThunk(id)),\r\n    editCampus: (campus) => dispatch(editCampusThunk(campus)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(CampusContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,gBAAgB,EAAEC,iBAAiB,EAAEC,eAAe,EAAEC,cAAc,QAAQ,oBAAoB;AACzG,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,UAAU,QAAQ,UAAU;AACrC,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,eAAe,GAAIC,KAAK,IAAK;EACjC,MAAM;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC;EAE1BN,SAAS,CAAC,MAAM;IACdU,KAAK,CAACE,WAAW,CAACD,EAAE,CAAC;EACvB,CAAC,EAAE,CAACA,EAAE,EAAED,KAAK,CAAC,CAAC;EAEf,oBACEX,KAAA,CAAAc,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEpB,KAAA,CAAAc,aAAA,CAACL,MAAM;IAAAM,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACVpB,KAAA,CAAAc,aAAA,CAACN,UAAU;IAACa,MAAM,EAAEV,KAAK,CAACU,MAAO;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAChC,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA,MAAME,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLF,MAAM,EAAEE,KAAK,CAACF,MAAM,CAAG;EACzB,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMG,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLZ,WAAW,EAAGD,EAAE,IAAKa,QAAQ,CAACtB,gBAAgB,CAACS,EAAE,CAAC,CAAC;IACnDc,UAAU,EAAGC,OAAO,IAAKF,QAAQ,CAACG,eAAe,CAACD,OAAO,CAAC,CAAC;IAC3DE,YAAY,EAAGjB,EAAE,IAAKa,QAAQ,CAACrB,iBAAiB,CAACQ,EAAE,CAAC,CAAC;IACrDkB,UAAU,EAAGT,MAAM,IAAKI,QAAQ,CAACpB,eAAe,CAACgB,MAAM,CAAC;EAC1D,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,eAAenB,OAAO,CAACoB,QAAQ,EAAEE,WAAW,CAAC,CAACd,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}