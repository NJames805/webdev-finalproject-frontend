{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\natha\\\\webdev-final-project\\\\frontend\\\\src\\\\components\\\\containers\\\\EditCampusContainer.js\";\n/*==================================================\r\nEditCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport React, { useState, useEffect } from \"react\";\nimport Header from './Header';\nimport { connect } from 'react-redux';\nimport { Navigate, useParams } from 'react-router-dom';\nimport EditCampusView from '../views/EditCampusView';\nimport { editCampusThunk, fetchCampusThunk } from '../../store/thunks';\nconst EditCampusContainer = props => {\n  const {\n    id\n  } = useParams();\n  const [state, setState] = useState({\n    name: \"\",\n    address: \"\",\n    description: \"\",\n    imageUrl: \"\",\n    redirect: false,\n    redirectId: null\n  });\n  useEffect(() => {\n    // Get campus data from back-end database\n    props.fetchCampus(id);\n  }, [id, props]);\n  useEffect(() => {\n    if (props.campus) {\n      setState(prevState => ({\n        ...prevState,\n        name: props.campus.name,\n        address: props.campus.address,\n        description: props.campus.description,\n        imageUrl: props.campus.imageUrl\n      }));\n    }\n  }, [props.campus]);\n\n  // Capture input data when it is entered\n  const handleChange = event => {\n    setState({\n      ...state,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  // Take action after user click the submit button\n  const handleSubmit = async event => {\n    event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n    let campus = {\n      id: props.campus.id,\n      name: state.name,\n      address: state.address,\n      description: state.description,\n      imageUrl: state.imageUrl\n    };\n\n    // Edit campus in back-end database\n    await props.editCampus(campus);\n\n    // Update state, and trigger redirect to show the edited campus\n    setState({\n      ...state,\n      redirect: true,\n      redirectId: campus.id\n    });\n  };\n\n  // Redirect to edited campus's page after submit\n  if (state.redirect) {\n    return /*#__PURE__*/React.createElement(Navigate, {\n      to: `/campus/${state.redirectId}`,\n      replace: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 12\n      }\n    });\n  }\n\n  // Display the input form via the corresponding View component\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(EditCampusView, {\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    campus: props.campus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }));\n};\n\n// Map state to props\nconst mapState = state => {\n  return {\n    campus: state.campus\n  };\n};\n\n// Map dispatch to props\nconst mapDispatch = dispatch => {\n  return {\n    editCampus: campus => dispatch(editCampusThunk(campus)),\n    fetchCampus: id => dispatch(fetchCampusThunk(id))\n  };\n};\n\n// Export store-connected container by default\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"names":["React","useState","useEffect","Header","connect","Navigate","useParams","EditCampusView","editCampusThunk","fetchCampusThunk","EditCampusContainer","props","id","state","setState","name","address","description","imageUrl","redirect","redirectId","fetchCampus","campus","prevState","handleChange","event","target","value","handleSubmit","preventDefault","editCampus","createElement","to","replace","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapState","mapDispatch","dispatch"],"sources":["C:/Users/natha/webdev-final-project/frontend/src/components/containers/EditCampusContainer.js"],"sourcesContent":["/*==================================================\r\nEditCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nimport EditCampusView from '../views/EditCampusView';\r\nimport { editCampusThunk, fetchCampusThunk } from '../../store/thunks';\r\n\r\nconst EditCampusContainer = (props) => {\r\n  const { id } = useParams();\r\n  const [state, setState] = useState({\r\n    name: \"\",\r\n    address: \"\",\r\n    description: \"\",\r\n    imageUrl: \"\",\r\n    redirect: false,\r\n    redirectId: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get campus data from back-end database\r\n    props.fetchCampus(id);\r\n  }, [id, props]);\r\n\r\n  useEffect(() => {\r\n    if (props.campus) {\r\n      setState(prevState => ({\r\n        ...prevState,\r\n        name: props.campus.name,\r\n        address: props.campus.address,\r\n        description: props.campus.description,\r\n        imageUrl: props.campus.imageUrl\r\n      }));\r\n    }\r\n  }, [props.campus]);\r\n\r\n  // Capture input data when it is entered\r\n  const handleChange = event => {\r\n    setState({\r\n      ...state,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let campus = {\r\n      id: props.campus.id,\r\n      name: state.name,\r\n      address: state.address,\r\n      description: state.description,\r\n      imageUrl: state.imageUrl\r\n    };\r\n    \r\n    // Edit campus in back-end database\r\n    await props.editCampus(campus);\r\n\r\n    // Update state, and trigger redirect to show the edited campus\r\n    setState({\r\n      ...state,\r\n      redirect: true,\r\n      redirectId: campus.id\r\n    });\r\n  }\r\n\r\n  // Redirect to edited campus's page after submit\r\n  if (state.redirect) {\r\n    return <Navigate to={`/campus/${state.redirectId}`} replace={true} />\r\n  }\r\n\r\n  // Display the input form via the corresponding View component\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <EditCampusView \r\n        handleChange={handleChange} \r\n        handleSubmit={handleSubmit}\r\n        campus={props.campus}      \r\n      />\r\n    </div>          \r\n  );\r\n}\r\n\r\n// Map state to props\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus,\r\n  };\r\n};\r\n\r\n// Map dispatch to props\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    editCampus: (campus) => dispatch(editCampusThunk(campus)),\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\nexport default connect(mapState, mapDispatch)(EditCampusContainer); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}