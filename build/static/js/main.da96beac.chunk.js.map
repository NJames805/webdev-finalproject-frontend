{"version":3,"sources":["components/containers/Header.js","components/views/HomePageView.js","components/containers/HomePageContainer.js","store/thunks.js","store/actions/actionCreators.js","store/actions/actionTypes.js","components/views/AllCampusesView.js","components/views/AllStudentsView.js","components/views/NewStudentView.js","components/views/CampusView.js","components/views/StudentView.js","components/containers/AllCampusesContainer.js","components/containers/CampusContainer.js","components/containers/AllStudentsContainer.js","components/containers/StudentContainer.js","components/containers/NewStudentContainer.js","components/views/NewCampusView.js","components/containers/NewCampusContainer.js","components/views/EditCampusView.js","components/containers/EditCampusContainer.js","components/views/EditStudentView.js","components/containers/EditStudentContainer.js","App.js","reportWebVitals.js","store/reducers/campuses.js","store/reducers/campus.js","store/reducers/students.js","store/reducers/student.js","store/index.js","index.js"],"names":["StyledAppBar","styled","AppBar","_ref","theme","flexGrow","StyledToolbar","Toolbar","display","justifyContent","StyledTypography","Typography","StyledButton","Button","color","textDecoration","Header","React","createElement","position","variant","component","Link","to","HomePageView","HomePageContainer","deleteCampusThunk","campusId","async","axios","delete","dispatch","type","payload","ac","err","console","error","editCampusThunk","campus","put","id","data","fetchCampusThunk","res","get","addStudentThunk","student","post","fetchStudentThunk","AllCampusesView","props","allCampuses","length","map","key","imageUrl","src","alt","name","style","width","height","borderRadius","address","description","onClick","deleteCampus","AllStudentsView","students","deleteStudent","firstname","lastname","FormContainer","backgroundColor","margin","FormTitle","marginBottom","textAlign","padding","NewStudentView","handleChange","handleSubmit","fontWeight","fontFamily","fontSize","onSubmit","e","onChange","required","min","max","step","CampusView","onDeleteStudent","onDeleteCampus","marginLeft","StudentContainer","maxWidth","StudentImage","StudentInfo","StudentView","email","gpa","AllCampusesContainer","Component","componentDidMount","log","this","fetchAllCampuses","render","connect","state","fetchCampus","addStudent","editCampus","useParams","useEffect","allStudents","fetchAllStudents","studentId","deleteStudentThunk","fetchStudent","NewStudentContainer","constructor","super","event","setState","target","value","preventDefault","newStudent","redirect","redirectId","componentWillUnmount","Navigate","replace","NewCampusView","NewCampusContainer","newCampus","addCampus","addCampusThunk","EditCampusView","initialized","useRef","useState","current","prevState","EditStudentView","editStudent","editStudentThunk","App","className","Routes","Route","path","element","CampusContainer","EditCampusContainer","AllStudentsContainer","EditStudentContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","arguments","undefined","action","initialState","filter","rootReducer","combineReducers","reducers","logger","createLogger","collapsed","store","createStore","applyMiddleware","thunk","container","document","getElementById","createRoot","StrictMode","Provider","BrowserRouter"],"mappings":"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","file":"static/js/main.da96beac.chunk.js","sourcesContent":["/*==================================================\r\nHeader.js\r\n\r\nIt contains the Header component to be displayed on every page.\r\nThe header contains navigation links to every other page.\r\n================================================== */\r\n// Import \"material\" library for building UI with React components\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport React from \"react\";\r\n// Define styled components\r\nconst StyledAppBar = styled(AppBar)(({ theme }) => ({\r\n  flexGrow: 1,\r\n}));\r\n\r\nconst StyledToolbar = styled(Toolbar)({\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n});\r\n\r\nconst StyledTypography = styled(Typography)({\r\n  flexGrow: 1,\r\n});\r\n\r\nconst StyledButton = styled(Button)({\r\n  color: 'white',\r\n  textDecoration: 'none',\r\n});\r\n\r\n// Header component, displayed on every page\r\n// Links to every other page\r\nconst Header = () => {\r\n  return (\r\n    <StyledAppBar position=\"static\">\r\n      <StyledToolbar>\r\n        <StyledTypography variant=\"h6\">\r\n          Campus Management System\r\n        </StyledTypography>\r\n\r\n        <StyledButton component={Link} to=\"/\">\r\n          Home\r\n        </StyledButton>\r\n\r\n        <StyledButton component={Link} to=\"/campuses\">\r\n          All Campuses\r\n        </StyledButton>\r\n\r\n        <StyledButton component={Link} to=\"/students\">\r\n          All Students\r\n        </StyledButton>\r\n      </StyledToolbar>\r\n    </StyledAppBar>\r\n  );    \r\n}\r\n\r\nexport default Header;\r\n","/*==================================================\r\nHomePageView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the home page.\r\n================================================== */\r\nimport React from 'react';\r\n\r\nconst HomePageView = () => {\r\n  // Render Home page view\r\n  return (\r\n    <div >\r\n      <h1>Home Page</h1>\r\n      <h2>Welcome to the Home Page</h2>\r\n    </div>\r\n  );    \r\n}\r\n\r\nexport default HomePageView;","/*==================================================\r\nHomePageContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport React from \"react\";\r\nimport Header from './Header';\r\nimport HomePageView from '../views/HomePageView';\r\n\r\n// Render Home page view by the corresponding View component\r\nconst HomePageContainer = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <HomePageView />\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default HomePageContainer;","/*==================================================\r\n/src/store/thunks.js\r\n\r\nIt contains all Thunk Creators and Thunks.\r\n================================================== */\r\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\r\nimport axios from 'axios';\r\n\r\n//All Campuses\r\n// THUNK CREATOR:\r\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\r\n  try {\r\n    console.log(\"fetchAllCampusesThunk\");\r\n    // API \"get\" call to get \"campuses\" data from database\r\n    let res = await axios.get(`/api/campuses`);  \r\n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.fetchAllCampuses(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Add Campus\r\n// THUNK CREATOR:\r\nexport const addCampusThunk = (campus) => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"post\" call to add \"campus\" object's data to database\r\n    let res = await axios.post(`/api/campuses`, campus);  \r\n    // Call Action Creator to return Action object (type + payload with new campus data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.addCampus(res.data));\r\n    return res.data;\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Delete Campus\r\n// THUNK CREATOR:\r\nexport const deleteCampusThunk = campusId => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"delete\" call to delete campus (based on \"campusId\") from database\r\n    await axios.delete(`/api/campuses/${campusId}`);\r\n    // Delete successful so change state with dispatch\r\n    dispatch(ac.deleteCampus(campusId));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Edit Campus\r\n// THUNK CREATOR:\r\nexport const editCampusThunk = campus => async dispatch => {\r\n  try {\r\n    // API \"put\" call to update campus (based on \"id\" and \"campus\" object's data) from database\r\n    let res = await axios.put(`/api/campuses/${campus.id}`, campus);\r\n    // Update successful so change state with dispatch\r\n    dispatch(ac.editCampus(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n\r\n// Single Campus\r\n// THUNK CREATOR:\r\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get a student data (based on \"id\")from database\r\n    let res = await axios.get(`/api/campuses/${id}`);  \r\n    dispatch(ac.fetchCampus(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// All Students\r\n// THUNK CREATOR:\r\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get \"students\" data from database\r\n    let res = await axios.get(`/api/students`);  \r\n    // Call Action Creator to return Action object (type + payload with \"students\" data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.fetchAllStudents(res.data));  \r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Add Student\r\n// THUNK CREATOR:\r\nexport const addStudentThunk = (student) => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"post\" call to add \"student\" object's data to database\r\n    let res = await axios.post(`/api/students`, student);  \r\n    // Call Action Creator to return Action object (type + payload with new students data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.addStudent(res.data));\r\n    return res.data;\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Delete Student\r\n// THUNK CREATOR:\r\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"delete\" call to delete student (based on \"studentID\") from database\r\n    await axios.delete(`/api/students/${studentId}`);  \r\n    // Delete successful so change state with dispatch\r\n    dispatch(ac.deleteStudent(studentId));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Edit Student\r\n// THUNK CREATOR:\r\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\r\n    let res = await axios.put(`/api/students/${student.id}`, student); \r\n    // Update successful so change state with dispatch\r\n    dispatch(ac.editStudent(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Single Student\r\n// THUNK CREATOR:\r\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get a specific student (based on \"id\") data from database\r\n    let res = await axios.get(`/api/students/${id}`);  \r\n    // Call Action Creator to return Action object (type + payload with student data)\r\n    // Then dispatch the Action object to Reducer to display student data \r\n    dispatch(ac.fetchStudent(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n","import * as at from './actionTypes';\r\n\r\n// ACTION CREATORS;\r\n/** needs to be an action creator\r\n * for each action type\r\n */\r\n\r\n// All Campuses\r\nexport const fetchAllCampuses = (campuses) => {\r\n  return {\r\n    type: at.FETCH_ALL_CAMPUSES,\r\n    payload: campuses,\r\n  };\r\n};\r\n\r\n// Add Campus\r\nexport const addCampus = (campus) => {\r\n  return {\r\n    type: at.ADD_CAMPUS,\r\n    payload: campus,\r\n  };\r\n};\r\n\r\n//Single Campus\r\nexport const fetchCampus = (campus) => {\r\n  return {\r\n    type: at.FETCH_CAMPUS,\r\n    payload: campus,\r\n  };\r\n};\r\n\r\n//All Students\r\nexport const fetchAllStudents = (students) => {\r\n  return {\r\n    type: at.FETCH_ALL_STUDENTS,\r\n    payload: students,\r\n  };\r\n};\r\n\r\nexport const addStudent = (student) => {\r\n  return {\r\n    type: at.ADD_STUDENT,\r\n    payload: student,\r\n  };\r\n};\r\n\r\nexport const deleteStudent = (studentId) => {\r\n  return {\r\n    type: at.DELETE_STUDENT,\r\n    payload: studentId,\r\n  };\r\n};\r\n\r\n\r\nexport const editStudent = (student) => {\r\n  return {\r\n    type: at.EDIT_STUDENT,\r\n    payload: student,\r\n  };\r\n};\r\n\r\n//Single Student\r\nexport const fetchStudent = (student) => {\r\n  return {\r\n    type: at.FETCH_STUDENT,\r\n    payload: student,\r\n  };\r\n};\r\n\r\nexport const deleteCampus = (campusId) => {\r\n  return {\r\n    type: at.DELETE_CAMPUS,\r\n    payload: campusId,\r\n  };\r\n};\r\n\r\nexport const editCampus = (campus) => {\r\n  return {\r\n    type: at.EDIT_CAMPUS,\r\n    payload: campus,\r\n  };\r\n};","// ACTION TYPES;\r\n\r\n//All campuses\r\nexport const FETCH_ALL_CAMPUSES = \"FETCH_ALL_CAMPUSES\";\r\nexport const ADD_CAMPUS = \"ADD_CAMPUS\";\r\nexport const DELETE_CAMPUS = \"DELETE_CAMPUS\";\r\nexport const EDIT_CAMPUS = \"EDIT_CAMPUS\";\r\n//Single campus\r\nexport const FETCH_CAMPUS = \"FETCH_CAMPUS\";\r\n\r\n//All students\r\nexport const FETCH_ALL_STUDENTS = \"FETCH_ALL_STUDENTS\";\r\nexport const ADD_STUDENT = \"ADD_STUDENT\";\r\nexport const DELETE_STUDENT = \"DELETE_STUDENT\";\r\nexport const EDIT_STUDENT = \"EDIT_STUDENT\";\r\n\r\n//Single student\r\nexport const FETCH_STUDENT = \"FETCH_STUDENT\";\r\n","/*==================================================\r\nAllCampusesView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display all campuses.\r\n================================================== */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from '@mui/material/Button';\r\n\r\nconst AllCampusesView = (props) => {\r\n  // If there is no campus, display a message.\r\n  if (!props.allCampuses.length) {\r\n    return (\r\n      <div>  \r\n        <h1>There are no campuses.</h1>\r\n        <Link to={`/newcampus`}>\r\n        <Button variant=\"contained\" color=\"primary\">\r\n          Add New Campus\r\n        </Button>\r\n      </Link>\r\n    </div>\r\n    );\r\n  }\r\n\r\n  // If there is at least one campus, render All Campuses view \r\n  return (\r\n    <div>\r\n      <h1>All Campuses</h1>\r\n\r\n      {props.allCampuses.map((campus) => (\r\n        <div key={campus.id}>\r\n          {/* Image display */}\r\n          {campus.imageUrl && (\r\n            <img \r\n              src={campus.imageUrl} \r\n              alt={`${campus.name}`} \r\n              style={{ width: \"300px\", height: \"auto\", borderRadius: \"10px\" }}\r\n            />\r\n          )}\r\n          <Link to={`/campus/${campus.id}`}>\r\n            <h2>{campus.name}</h2>\r\n          </Link>\r\n          <h4>campus id: {campus.id}</h4>\r\n          <p>{campus.address}</p>\r\n          <p>{campus.description}</p>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={() => props.deleteCampus(campus.id)}>Delete Campus</Button>\r\n          <hr/>\r\n        </div>\r\n      ))}\r\n      <br/>\r\n      <Link to=\"/newcampus\">\r\n        <Button variant=\"contained\" color=\"primary\">\r\n          Add New Campus\r\n        </Button>\r\n      </Link>\r\n      <br/><br/>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Validate data type of the props passed to component.\r\nAllCampusesView.propTypes = {\r\n  allCampuses: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default AllCampusesView;","/*==================================================\r\nAllStudentsView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the all students view page.\r\n================================================== */\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst AllStudentsView = (props) => {\r\n  const {students, deleteStudent} = props;\r\n  // If there is no student, display a message\r\n  if (!students.length) {\r\n    return (\r\n    <div>\r\n      <p>There are no students.</p>\r\n      <Link to={`newstudent`}>\r\n        <button>Add New Student</button>\r\n      </Link>\r\n    </div>\r\n    );\r\n  }\r\n  \r\n  // If there is at least one student, render All Students view \r\n  return (\r\n    <div>\r\n      <h1>All Students</h1>\r\n\r\n      {students.map((student) => {\r\n          let name = student.firstname + \" \" + student.lastname;\r\n          return (\r\n            <div key={student.id}>\r\n              <Link to={`/student/${student.id}`}>\r\n                <h2>{name}</h2>\r\n              </Link>\r\n              <button onClick={() => deleteStudent(student.id)}>Delete</button>\r\n              <hr/>\r\n            </div>\r\n          );\r\n        }\r\n      )}\r\n      <br/>\r\n      <Link to={`/newstudent`}>\r\n        <button>Add New Student</button>\r\n      </Link>\r\n      <br/><br/>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default AllStudentsView;","/*==================================================\r\nNewStudentView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the new student page.\r\n================================================== */\r\nimport React from \"react\";\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// Create styled components\r\nconst FormContainer = styled('div')({\r\n  width: '500px',\r\n  backgroundColor: '#f0f0f5',\r\n  borderRadius: '5px',\r\n  margin: 'auto',\r\n});\r\n\r\nconst FormTitle = styled('div')({\r\n  backgroundColor: '#c5c8d6',\r\n  marginBottom: '15px',\r\n  textAlign: 'center',\r\n  borderRadius: '5px 5px 0px 0px',\r\n  padding: '3px'\r\n});\r\n\r\nconst NewStudentView = (props) => {\r\n  const {handleChange, handleSubmit } = props;\r\n\r\n  // Render a New Student view with an input form\r\n  return (\r\n    <div>\r\n      <h1>New Student</h1>\r\n\r\n      <div>\r\n        <FormContainer>\r\n          <FormTitle>\r\n            <Typography style={{fontWeight: 'bold', fontFamily: 'Courier, sans-serif', fontSize: '20px', color: '#11153e'}}>\r\n              Add a Student\r\n            </Typography>\r\n          </FormTitle>\r\n          <form style={{textAlign: 'center'}} onSubmit={(e) => handleSubmit(e)}>\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>First Name: </label>\r\n            <input type=\"text\" name=\"firstname\" onChange={(e) => handleChange(e)} required />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Last Name: </label>\r\n            <input type=\"text\" name=\"lastname\" onChange={(e) => handleChange(e)} required />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Email: </label>\r\n            <input type=\"email\" name=\"email\" onChange={(e) => handleChange(e)} required />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>GPA: </label>\r\n            <input \r\n              type=\"number\" \r\n              name=\"gpa\" \r\n              min=\"0.0\" \r\n              max=\"4.0\" \r\n              step=\"0.1\" \r\n              onChange={(e) => handleChange(e)} \r\n            />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Image URL: </label>\r\n            <input type=\"url\" name=\"imageUrl\" onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Campus Id: </label>\r\n            <input type=\"text\" name=\"campusId\" onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n            <br/>\r\n            <br/>\r\n          </form>\r\n        </FormContainer>\r\n      </div>\r\n    </div>    \r\n  )\r\n}\r\n\r\nexport default NewStudentView;","/*==================================================\r\nCampusView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display a single campus and its students (if any).\r\n================================================== */\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from '@mui/material/Button';\r\n\r\n// Take in props data to construct the component\r\nconst CampusView = (props) => {\r\n  const { campus, onDeleteStudent, onDeleteCampus } = props;\r\n  \r\n  // Render a single Campus view with list of its students\r\n  return (\r\n    <div>\r\n      <img src={campus.imageUrl} alt={campus.name} />\r\n      <h1>{campus.name}</h1>\r\n      <p>{campus.address}</p>\r\n      <p>{campus.description}</p>\r\n      {campus.students.length === 0 ? (\r\n        <p>No students are enrolled at this campus.</p>\r\n      ) : (\r\n        campus.students.map(student => {\r\n          let name = student.firstname + \" \" + student.lastname;\r\n          return (\r\n            <div key={student.id}>\r\n              <Link to={`/student/${student.id}`}>\r\n                <h2>{name}</h2>\r\n              </Link>\r\n              <Button variant=\"contained\" color=\"error\" onClick={() => onDeleteStudent(student.id)} style={{ marginBottom: '10px' }}>Delete Student</Button>\r\n            </div>\r\n          );\r\n        })\r\n      )}\r\n      <Link to={`/newstudent`}>\r\n        <Button variant=\"contained\" color=\"primary\">Add New Student</Button>\r\n      </Link>\r\n      <Link to={`/editcampus/${campus.id}`}>\r\n        <Button variant=\"contained\" color=\"primary\" style={{ marginLeft: '10px' }}>Edit Campus</Button>\r\n      </Link>\r\n      <Button variant=\"contained\" color=\"error\" onClick={() => onDeleteCampus(campus.id)} style={{ marginLeft: '10px' }}>Delete Campus</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CampusView;","/*==================================================\r\nStudentView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the single student view page.\r\n================================================== */\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from '@mui/material/Button';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nconst StudentContainer = styled('div')({\r\n  maxWidth: '800px',\r\n  margin: 'auto',\r\n  padding: '20px',\r\n  textAlign: 'center'\r\n});\r\n\r\nconst StudentImage = styled('img')({\r\n  width: '300px',\r\n  height: 'auto',\r\n  borderRadius: '10px',\r\n  marginBottom: '20px'\r\n});\r\n\r\nconst StudentInfo = styled('div')({\r\n  marginBottom: '20px'\r\n});\r\n\r\nconst StudentView = (props) => {\r\n  const { student, onDeleteStudent } = props;\r\n\r\n  // Render a single Student view \r\n  return (\r\n    <StudentContainer>\r\n      <StudentImage src={student.imageUrl} alt={`${student.firstname} ${student.lastname}`} />\r\n      <h1>{student.firstname + \" \" + student.lastname}</h1>\r\n      \r\n      <StudentInfo>\r\n        <p><strong>Email:</strong> {student.email}</p>\r\n        <p><strong>GPA:</strong> {student.gpa || 'Not provided'}</p>\r\n        <p><strong>Campus:</strong> {student.campus ? student.campus.name : \"Not enrolled in any campus\"}</p>\r\n      </StudentInfo>\r\n\r\n      <div>\r\n        <Link to={`/editstudent/${student.id}`}>\r\n          <Button variant=\"contained\" color=\"primary\">Edit Student</Button>\r\n        </Link>\r\n        <Button \r\n          variant=\"contained\" \r\n          color=\"error\" \r\n          onClick={() => onDeleteStudent(student.id)} \r\n          style={{ marginLeft: '10px' }}\r\n        >\r\n          Delete Student\r\n        </Button>\r\n      </div>\r\n    </StudentContainer>\r\n  );\r\n};\r\n\r\nexport default StudentView;","/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport React from \"react\";\r\nimport Header from './Header';\r\nimport { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\r\nimport { AllCampusesView } from \"../views\";\r\n\r\nclass AllCampusesContainer extends Component {\r\n  // Get all campuses data from back-end database\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    this.props.fetchAllCampuses();\r\n  }\r\n\r\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <AllCampusesView\r\n          allCampuses={this.props.allCampuses}\r\n          deleteCampus={this.props.deleteCampus}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n  return {\r\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\r\n  };\r\n};  \r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\r\n  };\r\n};\r\n\r\n// Type check props;\r\nAllCampusesContainer.propTypes = {\r\n  allCampuses: PropTypes.array.isRequired,\r\n  fetchAllCampuses: PropTypes.func.isRequired,\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);","/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk, addStudentThunk } from \"../../store/thunks\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { CampusView } from \"../views\";\r\nimport Header from './Header';\r\n\r\nconst CampusContainer = (props) => {\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    props.fetchCampus(id);\r\n  }, [id, props]);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <CampusView campus={props.campus} />\r\n    </div>\r\n  );\r\n};\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n    addStudent: (student) => dispatch(addStudentThunk(student)),\r\n    deleteCampus: (id) => dispatch(deleteCampusThunk(id)),\r\n    editCampus: (campus) => dispatch(editCampusThunk(campus)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(CampusContainer);","/*==================================================\r\nAllStudentsContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport React from \"react\";\r\nimport Header from './Header';\r\nimport { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { \r\n  fetchAllStudentsThunk,\r\n  deleteStudentThunk\r\n} from '../../store/thunks';\r\n\r\nimport AllStudentsView from '../views/AllStudentsView';\r\n\r\nconst AllStudentsContainer = ({ fetchAllStudents, allStudents, deleteStudent }) => {\r\n  // Get all students data from back-end database\r\n  useEffect(() => {\r\n    fetchAllStudents();\r\n  }, [fetchAllStudents]);\r\n\r\n  // Render All Students view by passing all students data as props to the corresponding View component\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <AllStudentsView \r\n        students={allStudents}\r\n        deleteStudent={deleteStudent}   \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\r\nconst mapState = (state) => {\r\n  return {\r\n    allStudents: state.allStudents,  // Get the State object from Reducer \"allStudents\"\r\n  };\r\n};\r\n\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\r\n    deleteStudent: (studentId) => dispatch(deleteStudentThunk(studentId)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(AllStudentsContainer);","/*==================================================\r\nStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStudentThunk } from \"../../store/thunks\";\r\nimport { StudentView } from \"../views\";\r\nimport { useParams } from 'react-router-dom';\r\nimport Header from './Header';\r\n\r\nconst StudentContainer = (props) => {\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    props.fetchStudent(id);\r\n  }, [id, props]);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <StudentView student={props.student} />\r\n    </div>\r\n  );\r\n};\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n  return {\r\n    student: state.student,  // Get the State object from Reducer \"student\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(StudentContainer);","/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport React from \"react\";\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport NewStudentView from '../views/NewStudentView';\r\nimport { addStudentThunk } from '../../store/thunks';\r\n\r\nclass NewStudentContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      firstname: \"\", \r\n      lastname: \"\", \r\n      campusId: null, \r\n      redirect: false, \r\n      redirectId: null\r\n    };\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let student = {\r\n        firstname: this.state.firstname,\r\n        lastname: this.state.lastname,\r\n        campusId: this.state.campusId\r\n    };\r\n    \r\n    // Add new student in back-end database\r\n    let newStudent = await this.props.addStudent(student);\r\n\r\n    // Update state, and trigger redirect to show the new student\r\n    this.setState({\r\n      firstname: \"\", \r\n      lastname: \"\", \r\n      campusId: null, \r\n      redirect: true, \r\n      redirectId: newStudent.id\r\n    });\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new student input form\r\n  render() {\r\n    // Redirect to new student's page after submit\r\n    if(this.state.redirect) {\r\n      return <Navigate to={`/student/${this.state.redirectId}`} replace={true} />\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewStudentView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        addStudent: (student) => dispatch(addStudentThunk(student)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewStudentContainer);","/*==================================================\r\nNewCampusView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the new campus page.\r\n================================================== */\r\nimport React from \"react\";\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// Create styled components\r\nconst FormContainer = styled('div')({\r\n  width: '500px',\r\n  backgroundColor: '#f0f0f5',\r\n  borderRadius: '5px',\r\n  margin: 'auto',\r\n});\r\n\r\nconst FormTitle = styled('div')({\r\n  backgroundColor: '#c5c8d6',\r\n  marginBottom: '15px',\r\n  textAlign: 'center',\r\n  borderRadius: '5px 5px 0px 0px',\r\n  padding: '3px'\r\n});\r\n\r\nconst NewCampusView = (props) => {\r\n  const { handleChange, handleSubmit } = props;\r\n\r\n  // Render a New Campus view with an input form\r\n  return (\r\n    <div>\r\n      <h1>New Campus</h1>\r\n\r\n      <div>\r\n        <FormContainer>\r\n          <FormTitle>\r\n            <Typography style={{fontWeight: 'bold', fontFamily: 'Courier, sans-serif', fontSize: '20px', color: '#11153e'}}>\r\n              Add a Campus\r\n            </Typography>\r\n          </FormTitle>\r\n          <form style={{textAlign: 'center'}} onSubmit={(e) => handleSubmit(e)}>\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Name: </label>\r\n            <input type=\"text\" name=\"name\" onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Address: </label>\r\n            <input type=\"text\" name=\"address\" onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Description: </label>\r\n            <textarea name=\"description\" onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n            <br/>\r\n            <br/>\r\n          </form>\r\n        </FormContainer>\r\n      </div>\r\n    </div>    \r\n  )\r\n}\r\n\r\nexport default NewCampusView; ","/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport React from \"react\";\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport NewCampusView from '../views/NewCampusView';\r\nimport { addCampusThunk } from '../../store/thunks';\r\n\r\nclass NewCampusContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      name: \"\", \r\n      address: \"\", \r\n      description: \"\",\r\n      redirect: false, \r\n      redirectId: null\r\n    };\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let campus = {\r\n        name: this.state.name,\r\n        address: this.state.address,\r\n        description: this.state.description\r\n    };\r\n    \r\n    // Add new campus in back-end database\r\n    let newCampus = await this.props.addCampus(campus);\r\n\r\n    // Update state, and trigger redirect to show the new campus\r\n    this.setState({\r\n      name: \"\", \r\n      address: \"\", \r\n      description: \"\",\r\n      redirect: true, \r\n      redirectId: newCampus.id\r\n    });\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new campus input form\r\n  render() {\r\n    // Redirect to new campus's page after submit\r\n    if(this.state.redirect) {\r\n      return <Navigate to={`/campus/${this.state.redirectId}`} replace={true} />\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewCampusView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        addCampus: (campus) => dispatch(addCampusThunk(campus)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewCampusContainer); ","/*==================================================\r\nEditCampusView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the edit campus page.\r\n================================================== */\r\nimport React from \"react\";\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// Create styled components\r\nconst FormContainer = styled('div')({\r\n  width: '500px',\r\n  backgroundColor: '#f0f0f5',\r\n  borderRadius: '5px',\r\n  margin: 'auto',\r\n});\r\n\r\nconst FormTitle = styled('div')({\r\n  backgroundColor: '#c5c8d6',\r\n  marginBottom: '15px',\r\n  textAlign: 'center',\r\n  borderRadius: '5px 5px 0px 0px',\r\n  padding: '3px'\r\n});\r\n\r\nconst EditCampusView = (props) => {\r\n  const { handleChange, handleSubmit, campus } = props;\r\n\r\n  // Render an Edit Campus view with an input form\r\n  return (\r\n    <div>\r\n      <h1>Edit Campus</h1>\r\n\r\n      <div>\r\n        <FormContainer>\r\n          <FormTitle>\r\n            <Typography style={{fontWeight: 'bold', fontFamily: 'Courier, sans-serif', fontSize: '20px', color: '#11153e'}}>\r\n              Edit Campus\r\n            </Typography>\r\n          </FormTitle>\r\n          <form style={{textAlign: 'center'}} onSubmit={(e) => handleSubmit(e)}>\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Name: </label>\r\n            <input type=\"text\" name=\"name\" value={campus.name || ''} onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Address: </label>\r\n            <input type=\"text\" name=\"address\" value={campus.address || ''} onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Description: </label>\r\n            <textarea name=\"description\" value={campus.description || ''} onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Image URL: </label>\r\n            <input type=\"text\" name=\"imageUrl\" value={campus.imageUrl || ''} onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n            <br/>\r\n            <br/>\r\n          </form>\r\n        </FormContainer>\r\n      </div>\r\n    </div>    \r\n  )\r\n}\r\n\r\nexport default EditCampusView; ","/*==================================================\r\nEditCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nimport EditCampusView from '../views/EditCampusView';\r\nimport { editCampusThunk, fetchCampusThunk } from '../../store/thunks';\r\n\r\nconst EditCampusContainer = (props) => {\r\n  const { id } = useParams();\r\n  const initialized = useRef(false);\r\n  const [state, setState] = useState({\r\n    name: \"\",\r\n    address: \"\",\r\n    description: \"\",\r\n    imageUrl: \"\",\r\n    redirect: false,\r\n    redirectId: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get campus data from back-end database\r\n    props.fetchCampus(id);\r\n  }, [id, props]);\r\n\r\n  useEffect(() => {\r\n    if (props.campus && !initialized.current) {\r\n      initialized.current = true;\r\n      setState(prevState => ({\r\n        ...prevState,\r\n        name: props.campus.name,\r\n        address: props.campus.address,\r\n        description: props.campus.description,\r\n        imageUrl: props.campus.imageUrl\r\n      }));\r\n    }\r\n  }, [props.campus]);\r\n\r\n  // Capture input data when it is entered\r\n  const handleChange = event => {\r\n    setState({\r\n      ...state,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let campus = {\r\n      id: props.campus.id,\r\n      name: state.name,\r\n      address: state.address,\r\n      description: state.description,\r\n      imageUrl: state.imageUrl\r\n    };\r\n    \r\n    // Edit campus in back-end database\r\n    await props.editCampus(campus);\r\n\r\n    // Update state, and trigger redirect to show the edited campus\r\n    setState({\r\n      ...state,\r\n      redirect: true,\r\n      redirectId: campus.id\r\n    });\r\n  }\r\n\r\n  // Redirect to edited campus's page after submit\r\n  if (state.redirect) {\r\n    return <Navigate to={`/campus/${state.redirectId}`} replace={true} />\r\n  }\r\n\r\n  // Display the input form via the corresponding View component\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <EditCampusView \r\n        handleChange={handleChange} \r\n        handleSubmit={handleSubmit}\r\n        campus={state}      \r\n      />\r\n    </div>          \r\n  );\r\n}\r\n\r\n// Map state to props\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus,\r\n  };\r\n};\r\n\r\n// Map dispatch to props\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    editCampus: (campus) => dispatch(editCampusThunk(campus)),\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\nexport default connect(mapState, mapDispatch)(EditCampusContainer); ","/*==================================================\r\nEditStudentView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the edit student page.\r\n================================================== */\r\nimport React from \"react\";\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// Create styled components\r\nconst FormContainer = styled('div')({\r\n  width: '500px',\r\n  backgroundColor: '#f0f0f5',\r\n  borderRadius: '5px',\r\n  margin: 'auto',\r\n});\r\n\r\nconst FormTitle = styled('div')({\r\n  backgroundColor: '#c5c8d6',\r\n  marginBottom: '15px',\r\n  textAlign: 'center',\r\n  borderRadius: '5px 5px 0px 0px',\r\n  padding: '3px'\r\n});\r\n\r\nconst EditStudentView = (props) => {\r\n  const { handleChange, handleSubmit, student } = props;\r\n\r\n  // Render an Edit Student view with an input form\r\n  return (\r\n    <div>\r\n      <h1>Edit Student</h1>\r\n\r\n      <div>\r\n        <FormContainer>\r\n          <FormTitle>\r\n            <Typography style={{fontWeight: 'bold', fontFamily: 'Courier, sans-serif', fontSize: '20px', color: '#11153e'}}>\r\n              Edit Student\r\n            </Typography>\r\n          </FormTitle>\r\n          <form style={{textAlign: 'center'}} onSubmit={(e) => handleSubmit(e)}>\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>First Name: </label>\r\n            <input type=\"text\" name=\"firstname\" value={student.firstname || ''} onChange={(e) => handleChange(e)} required />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Last Name: </label>\r\n            <input type=\"text\" name=\"lastname\" value={student.lastname || ''} onChange={(e) => handleChange(e)} required />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Email: </label>\r\n            <input type=\"email\" name=\"email\" value={student.email || ''} onChange={(e) => handleChange(e)} required />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>GPA: </label>\r\n            <input \r\n              type=\"number\" \r\n              name=\"gpa\" \r\n              min=\"0.0\" \r\n              max=\"4.0\" \r\n              step=\"0.1\" \r\n              value={student.gpa || ''} \r\n              onChange={(e) => handleChange(e)} \r\n            />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Image URL: </label>\r\n            <input type=\"url\" name=\"imageUrl\" value={student.imageUrl || ''} onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Campus Id: </label>\r\n            <input type=\"text\" name=\"campusId\" value={student.campusId || ''} onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n            <br/>\r\n            <br/>\r\n          </form>\r\n        </FormContainer>\r\n      </div>\r\n    </div>    \r\n  )\r\n}\r\n\r\nexport default EditStudentView; ","/*==================================================\r\nEditStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport Header from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nimport EditStudentView from '../views/EditStudentView';\r\nimport { editStudentThunk, fetchStudentThunk } from '../../store/thunks';\r\n\r\nconst EditStudentContainer = (props) => {\r\n  const { id } = useParams();\r\n  const initialized = useRef(false);\r\n  const [state, setState] = useState({\r\n    firstname: \"\",\r\n    lastname: \"\",\r\n    campusId: null,\r\n    redirect: false,\r\n    redirectId: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get student data from back-end database\r\n    props.fetchStudent(id);\r\n  }, [id, props]);\r\n\r\n  useEffect(() => {\r\n    if (props.student && !initialized.current) {\r\n      initialized.current = true;\r\n      setState(prevState => ({\r\n        ...prevState,\r\n        firstname: props.student.firstname,\r\n        lastname: props.student.lastname,\r\n        campusId: props.student.campusId\r\n      }));\r\n    }\r\n  }, [props.student]);\r\n\r\n  // Capture input data when it is entered\r\n  const handleChange = event => {\r\n    setState({\r\n      ...state,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let student = {\r\n      id: props.student.id,\r\n      firstname: state.firstname,\r\n      lastname: state.lastname,\r\n      campusId: state.campusId\r\n    };\r\n    \r\n    // Edit student in back-end database\r\n    await props.editStudent(student);\r\n\r\n    // Update state, and trigger redirect to show the edited student\r\n    setState({\r\n      ...state,\r\n      redirect: true,\r\n      redirectId: student.id\r\n    });\r\n  }\r\n\r\n  // Redirect to edited student's page after submit\r\n  if (state.redirect) {\r\n    return <Navigate to={`/student/${state.redirectId}`} replace={true} />\r\n  }\r\n\r\n  // Display the input form via the corresponding View component\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <EditStudentView \r\n        handleChange={handleChange} \r\n        handleSubmit={handleSubmit}\r\n        student={state}      \r\n      />\r\n    </div>          \r\n  );\r\n}\r\n\r\n// Map state to props\r\nconst mapState = (state) => {\r\n  return {\r\n    student: state.student,\r\n  };\r\n};\r\n\r\n// Map dispatch to props\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    editStudent: (student) => dispatch(editStudentThunk(student)),\r\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\nexport default connect(mapState, mapDispatch)(EditStudentContainer); ","import \"./App.css\";\r\nimport React from \"react\";\r\n//Router\r\nimport { Routes, Route } from \"react-router-dom\";\r\n//Components\r\nimport {\r\n  HomePageContainer,\r\n  CampusContainer,\r\n  StudentContainer,\r\n  AllCampusesContainer,\r\n  AllStudentsContainer,\r\n  NewStudentContainer,\r\n  NewCampusContainer,\r\n  EditCampusContainer,\r\n  EditStudentContainer\r\n} from './components/containers';\r\n\r\n// if you create separate components for adding/editing \r\n// a student or campus, make sure you add routes to those\r\n// components here\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePageContainer />} />\r\n        <Route path=\"/campuses\" element={<AllCampusesContainer />} />\r\n        <Route path=\"/campus/:id\" element={<CampusContainer />} />\r\n        <Route path=\"/newcampus\" element={<NewCampusContainer />} />\r\n        <Route path=\"/editcampus/:id\" element={<EditCampusContainer />} />\r\n        <Route path=\"/students\" element={<AllStudentsContainer />} />\r\n        <Route path=\"/newstudent\" element={<NewStudentContainer />} />\r\n        <Route path=\"/student/:id\" element={<StudentContainer />} />\r\n        <Route path=\"/editstudent/:id\" element={<EditStudentContainer />} />\r\n      </Routes>        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","/*==================================================\r\n/src/store/reducers/campuses.js\r\n\r\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \r\nDepending on the Action object, the Reducer updates the State and return the new State object.\r\nIt also defines the State and its default initial value.\r\n================================================== */\r\nimport * as at from \"../actions/actionTypes\";  // Import Action Types (\"at\" keyword for Action Type)\r\n\r\n// REDUCER:\r\nconst allCampuses = (state = [], action) => {  // Empty array as default Initial State\r\n  switch (action.type) {\r\n    case at.FETCH_ALL_CAMPUSES:\r\n      return action.payload;\r\n    default:\r\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default allCampuses;","/*==================================================\r\n/src/store/reducers/campus.js\r\n\r\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \r\nDepending on the Action object, the Reducer updates the State and return the new State object.\r\nIt also defines the State and its default initial value.\r\n================================================== */\r\nimport { FETCH_CAMPUS, EDIT_CAMPUS } from \"../actions/actionTypes\";  // Import Action Type\r\n\r\n// Define default Initial State\r\nconst initialState = {\r\n  students: [],  // Empty students array\r\n};\r\n\r\n// REDUCER:\r\nconst campus = (state = initialState, action) => {  // Use \"initialState\" as default Initial State\r\n  switch (action.type) {\r\n    case FETCH_CAMPUS:\r\n      return action.payload;\r\n    case EDIT_CAMPUS:\r\n      return action.payload;\r\n    default:\r\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default campus;","/*==================================================\r\n/src/store/reducers/students.js\r\n\r\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \r\nDepending on the Action object, the Reducer updates the State and return the new State object.\r\nIt also defines the State and its default initial value.\r\n================================================== */\r\nimport * as at from \"../actions/actionTypes\";  // Import Action Types (\"at\" keyword for Action Type)\r\n\r\n// REDUCER:\r\nconst allStudents = (state=[], action) => {  // Empty array as default Initial State\r\n  switch (action.type) {\r\n    case at.FETCH_ALL_STUDENTS:\r\n      return action.payload;\r\n    case at.ADD_STUDENT:\r\n      return [...state, action.payload]\r\n    case at.DELETE_STUDENT:\r\n      return state.filter(student => student.id!==action.payload);\r\n    case at.EDIT_STUDENT:\r\n      return state.map(student => { \r\n        return (\r\n          student.id===action.payload.id ? action.payload : student\r\n        );\r\n      });\r\n    default:\r\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default allStudents;","/*==================================================\r\n/src/store/reducers/student.js\r\n\r\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \r\nDepending on the Action object, the Reducer updates the State and return the new State object.\r\nIt also defines the State and its default initial value.\r\n================================================== */\r\nimport { FETCH_STUDENT, EDIT_STUDENT } from \"../actions/actionTypes\";  // Import Action Type\r\n\r\n// Define default Initial state\r\nconst initialState = {\r\n  campus: {},  // Empty object\r\n};\r\n\r\n// REDUCER:\r\nconst student = (state=initialState, action) => {  // Use \"initialState\" as default Initial State\r\n  switch (action.type) {\r\n    case FETCH_STUDENT:\r\n      return action.payload;\r\n    case EDIT_STUDENT:\r\n      return action.payload;\r\n    default:\r\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default student;","/*==================================================\r\n/src/store/index.js\r\n\r\nIt contains the necessities and accessories for constructing the Redux Store.\r\nIt creates a single Redux Store that holds the complete state tree of the app, so that the Redux Store state can access the states in all Reducers. \r\n================================================== */\r\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Import all Reducers from the barrel file (/src/store/reducers/index.js)\r\nimport * as reducers from './reducers';\r\n\r\n// Construct the Redux Store:\r\n// Create a single Root Reducer to combine all Reducers, so that the Redux Store state can \r\n// access the states in all Reducers of the app.\r\nconst rootReducer = combineReducers(reducers);  \r\n// Create a logger middleware to log dispatched Actions in console,\r\n// so that it displays prevState, nextState, and Action when an Action is dispatched.\r\nconst logger = createLogger({ collapsed: true });  // Collapse console messages when displayed\r\n// Create a Redux Store using Root Reducer and a middleware pipeline consisting of Thunk and logger.\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\n// Export the Redux Store by default, which will be provided to and injected within our entire application\r\nexport default store;","import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// Redux\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\n// Router\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst container = document.getElementById('root');\r\nconst root = createRoot(container);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}